// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using static ImageRecognitionNN.ImageLearning;

namespace ImageRecognitionNN
{
    public partial class ImageLearning
    {

        private static string MLNetModelPath = Path.GetFullPath("ImageLearning.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine
            = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        public static KeyValuePair<string, decimal>[] Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;

            var labels = GetAllLabels();

            var modelOutput = predEngine.Predict(input);

            KeyValuePair<string, decimal>[] top10scores = labels.ToDictionary(
            l => l,
                l => (decimal)modelOutput.Score[Array.IndexOf(labels, l)]
                )
                .OrderByDescending(kv => kv.Value)
                .Take(10).ToArray();

            return top10scores;
        }

        public static string[] GetAllLabels() 
        {
            var predEngine = PredictEngine.Value;

            var labelBuffer = new VBuffer<ReadOnlyMemory<char>>();
            predEngine.OutputSchema["Score"].Annotations.GetValue("SlotNames", ref labelBuffer);
            return labelBuffer.DenseValues().Select(l => l.ToString()).ToArray();
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
